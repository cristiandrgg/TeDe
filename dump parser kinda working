//https://github.com/cristiandrgg/TeDe

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "parser.h"

AT_COMMAND_DATA date;

STATE_MACHINE_RETURN_VALUE at_command_parse(char char_crt){

	if(date.line_count >= AT_COMMAND_MAX_LINE_SIZE){
		return STATE_MACHINE_READY_WITH_ERROR;
	}

	//static uint8_t Case = 0;
	uint8_t lines = 0;
	uint8_t line_size = 0;
	uint8_t data_index;

	int index_col = 0;

	char *start=0;

	//static uint32_t offset = 0;
	//char_crt += offset;

	printf(" Nod: %d \n", date.nod);
	printf(" AT_COMMAND_PARSE: %c \n", char_crt);

		if((lines >= AT_COMMAND_MAX_LINES) && (line_size >= AT_COMMAND_MAX_LINE_SIZE))
			{
				date.nod = STATE_MACHINE_READY_WITH_ERROR;
				return date.nod;
			}	
		
			//char c = char_crt;

			switch(date.nod){	// date.nod -> Case -> starea
				
					case 0:
					{
						if(char_crt == 13){		//CR -> incepe transmisia
							date.nod = 1;
							return STATE_MACHINE_NOT_READY;
						}
						/*
						else if (char_crt == '+'){
							printf("aici\n");
							date.nod=7;
							return STATE_MACHINE_NOT_READY;
						}
						*/
						else{
							return STATE_MACHINE_READY_WITH_ERROR;
						}
						break;
					}
					
					case 1:
					{
						if(char_crt == 10){		//LF
							date.nod = 2;
							char_crt++;
						}
						else{
							return STATE_MACHINE_READY_WITH_ERROR;
						}
						break;
					}
					
					case 2:
					{
						if(char_crt == 'O'){				
							date.nod = 3;
							return STATE_MACHINE_NOT_READY;
						}
						else if(char_crt == 'E'){	
							date.nod = 7;
							return STATE_MACHINE_NOT_READY;
						}
						else if(char_crt == '+'){	
							date.nod = 144;			//un fel de stare intermediara sa fac niste operatii in ea
							return STATE_MACHINE_NOT_READY;
						}
						else{
							return STATE_MACHINE_READY_WITH_ERROR;;
						}
						break;
					}
					
					case 3:
					{
						if(char_crt == 'K'){	
							date.nod = 4;
							return STATE_MACHINE_NOT_READY;
						}
						else{
							return STATE_MACHINE_READY_WITH_ERROR;
						}
						break;
					}
					
					case 4:
					{
						if(char_crt == 13){		//CR
							date.nod = 5;
							return STATE_MACHINE_NOT_READY;
						}
						else{
							return STATE_MACHINE_READY_WITH_ERROR;
						}
						break;
					}
					
					case 5:
					{
						if(char_crt == 10){		//LF
							date.nod = 6;
							return STATE_MACHINE_NOT_READY;
						}
						else{
							return STATE_MACHINE_READY_WITH_ERROR;
						}
						break;
					}
					
					case 6:	//nod FINAL
					{
						return STATE_MACHINE_READY_OK;
					}
					
					case 7:
					{
						if(char_crt == 'R'){	
							date.nod = 8;
							return STATE_MACHINE_NOT_READY;
						}
						else{
							return STATE_MACHINE_READY_WITH_ERROR;
						}
						break;
					}
					
					case 8:
					{
						if(char_crt == 'R'){	
							date.nod = 9;
							return STATE_MACHINE_NOT_READY;
						}
						else{
							return STATE_MACHINE_READY_WITH_ERROR;
						}
						break;
					}
					
					case 9:
					{
						if(char_crt == 'O'){	
							date.nod = 10;
							return STATE_MACHINE_NOT_READY;
						}
						else{
							return STATE_MACHINE_READY_WITH_ERROR;
						}
						break;
					}
					
					case 10:
					{
						if(char_crt == 'R'){	
							date.nod = 11;
							return STATE_MACHINE_NOT_READY;
						}
						else{
							return STATE_MACHINE_READY_WITH_ERROR;
						}
						break;
					}
					
					case 11:
					{
						if(char_crt == 13){		//CR
							date.nod = 12;
							return STATE_MACHINE_NOT_READY;
						}
						else{
							return STATE_MACHINE_READY_WITH_ERROR;
						}
						break;
					}
					
					case 12:
					{
						if(char_crt == 10){		//LF
							date.nod = 13;
							return STATE_MACHINE_NOT_READY;
						}
						else{
							return STATE_MACHINE_READY_WITH_ERROR;
						}
						break;
					}
					
					case 13:	//nod FINAL pt ERROR
					{
						return STATE_MACHINE_READY_WITH_ERROR;
					}
					
					case 144:		//un fel de stare intermediara
					{
						date.nod=14;
						date.data[date.line_count][0] = char_crt;
						date.data[date.line_count][1] = '\0';
						return STATE_MACHINE_NOT_READY;
					}

					case 14:
					{
						if(char_crt > 30 && char_crt < 127){

							date.nod = 14;
							int i = 0;

							for(i=0; date.data[date.line_count][i]!='\0'; i++){
								
							}
							if(i<AT_COMMAND_MAX_LINE_SIZE-1)
							{
								date.data[date.line_count][i] = char_crt;
								date.data[date.line_count][i+1] = '\0';
								return STATE_MACHINE_NOT_READY;
							}
							else
								return STATE_MACHINE_READY_WITH_ERROR;
						}
						
						else if(char_crt == 13){	//CR
							//terminator '\0'
							date.nod = 15;
							return STATE_MACHINE_NOT_READY;
						}
						else{
							return STATE_MACHINE_READY_WITH_ERROR;
						}
						break;
					}
					
					case 15:
					{
						if(char_crt == 10){		//LF
							date.nod = 16;
							
							/*
							char_crt++;

							 if (lines < AT_COMMAND_MAX_LINES){
                                memset(date.data[lines], '\0', AT_COMMAND_MAX_LINE_SIZE);
                                memcpy(date.data[lines], start, line_size);
                                //printf("Copied: %s \n", date.data[lines]);
                                line_size = 0;
                                lines++;
                            }

							/*
							memset(date.data[data_index], '\0', AT_COMMAND_MAX_LINE_SIZE);
							memcpy(date.data[data_index++], start, line_size);
							printf("Copied: %s \n", date.data[data_index-1]);
							char_crt++;
							line_size++;
							lines++;
							*/

							date.line_count++;
							return STATE_MACHINE_NOT_READY;
						
						}
						else{
							return STATE_MACHINE_READY_WITH_ERROR;
						}
						break;
					}
					
					case 16:
					{
						if(char_crt == 13){		//CR
							date.nod = 17;
							return STATE_MACHINE_NOT_READY;
						}
						else if(char_crt == '+'){
							date.nod = 144;
							return STATE_MACHINE_NOT_READY;
						}
						else{
							return STATE_MACHINE_READY_WITH_ERROR;
						}
						break;
					}
					
					case 17:
					{
						if(char_crt == 10){		//LF
							date.nod = 18;
							return STATE_MACHINE_NOT_READY;
						}
						else{
							return STATE_MACHINE_READY_WITH_ERROR;
						}
						break;
					}
					
					case 18:
					{
						if(char_crt == 'E'){		
							date.nod = 7;
							return STATE_MACHINE_NOT_READY;
						}
						else if(char_crt == 'O'){
							date.nod = 3;
							return STATE_MACHINE_NOT_READY;
						}
						else{
							return STATE_MACHINE_READY_WITH_ERROR;
						}
						break;
					}
			}

		}

	

